name: Python Build and Release

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: '版本发布标签'
        required: true
        type: string
      version:
        description: '版本名称'
        required: true
        type: string
      release_channel:
        description: '版本发布通道'
        required: true
        type: choice
        options: [Stable, Beta, Dev]
        default: 'Stable'

jobs:
  Build-Release:
    runs-on: windows-latest
    env:
      artifact_name: CustomTextDisplayTool_${{ github.event.inputs.release_tag }}_${{ github.event.inputs.release_channel }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up 32-bit Python
      uses: actions/setup-python@v5.3.0
      with:
        python-version: '3.8.10'
        architecture: 'x86'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt

    - name: Build EXE
      run: |
        rm dist -Recurse -Force -ErrorAction Continue
        pyinstaller --onefile -w -i Assets\icon.ico CustomTextDisplayTool.py
        pyinstaller -w -i Assets\icon.ico CustomTextDisplayTool.py
        pyinstaller -w --distpath dist/CustomTextDisplayTool_bsdnsxx -n CustomTextDisplayTool -i Assets\icon.ico CustomTextDisplayTool_bsdnsxx.py

    - name: Package portable EXE
      run: |
        mkdir -p release
        Compress-Archive -Path dist/CustomTextDisplayTool.exe -DestinationPath release/${{ env.artifact_name }}_Portable.zip
        echo 'Successfully packaged "${{ env.artifact_name }}_Portable".'

    - name: Upload portable EXE to GitHub Actions
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.artifact_name }}_Portable
        path: release/${{ env.artifact_name }}_Portable.zip

    - name: Upload EXE to GitHub Actions
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.artifact_name }}
        path: dist/CustomTextDisplayTool/

    - name: Upload bsdnsxx Customized EXE to GitHub Actions
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.artifact_name }}_bsdnsxx
        path: dist/CustomTextDisplayTool_bsdnsxx/CustomTextDisplayTool/

    - name: Move the EXE to the repository folder
      run: |
        rm "CustomTextDisplayTool/Bin" -Recurse -Force -ErrorAction Continue
        mkdir -p "CustomTextDisplayTool/Bin"
        mv -Path "dist/CustomTextDisplayTool/*" -Destination "CustomTextDisplayTool/Bin/" -Force
        ls CustomTextDisplayTool -Recurse -Force

    - name: Install Inno Setup
      run: |
        choco install innosetup
        echo 'Installed Inno Setup successfully.'

    - name: Create Installer
      run: |
        ISCC.exe Installer/CustomTextDisplayTool.iss
        mv -Path "Installer/CustomTextDisplayTool_Setup.exe" -Destination "release/${{ env.artifact_name }}_Setup.exe" -Force

    - name: Upload Installer to GitHub Actions
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.artifact_name }}_Installer
        path: release/${{ env.artifact_name }}_Setup.exe

    - name: Temporary move the bsdnsxx Customized EXE to the repository folder
      run: |
        rm "CustomTextDisplayTool/Bin" -Recurse -Force -ErrorAction Continue
        mkdir -p "CustomTextDisplayTool/Bin"
        mv -Path "dist/CustomTextDisplayTool_bsdnsxx/CustomTextDisplayTool/*" -Destination "CustomTextDisplayTool/Bin/" -Force
        ls CustomTextDisplayTool -Recurse -Force

    - name: Create Installer
      run: |
        ISCC.exe Installer/CustomTextDisplayTool.iss
        mv -Path "Installer/CustomTextDisplayTool_Setup.exe" -Destination "Installer/${{ env.artifact_name }}_bsdnsxx_Setup.exe" -Force

    - name: Upload bsdnsxx Customized Installer to GitHub Actions
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.artifact_name }}_bsdnsxx_Installer
        path: Installer/${{ env.artifact_name }}_bsdnsxx_Setup.exe

    - name: Calculate checksums
      run: |
        ls release -Recurse -Force
        pwsh .github/workflows/generate-sha256.ps1 release/

    - name: Create Release
      if: ${{ github.event.inputs.release_channel != 'Dev' }}
      uses: ncipollo/release-action@v1
      env:
          IS_PRERELEASE: ${{ github.event.inputs.release_channel == 'Beta' }}
      with:
        artifacts: |
          release/*.zip
          release/*.exe
        draft: true
        bodyFile: release/checksums.md
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.event_name != 'workflow_dispatch' && github.ref || github.event.inputs.release_tag }}
        name: ${{ github.event.inputs.version }}-${{ github.event.inputs.release_channel }}
        prerelease: ${{ env.IS_PRERELEASE }}
        allowUpdates: true
        omitBodyDuringUpdate: true
        omitNameDuringUpdate: true
        omitPrereleaseDuringUpdate: true
